;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; vars
(setq user-full-name "ericd"
      user-mail-address "ed@mailbox.org"
      doom-font (font-spec :family "Fira Code" :size 18)
      doom-unicode-font (font-spec :family "Source Han Sans CN" :size 18)
      doom-theme 'doom-palenight
      display-line-numbers-type nil
      org-directory "~/documents/org/")

;; utils
(defun ed/delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))

(defun ed/revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))

(defun ed/copy-file-only-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-name))))
    (when filename
      (kill-new filename))
    (message filename)))

(defun ed/org-remove-linked-file ()
  "Remove `org-mode' link at point and trash linked file."
  (interactive)
  (let* ((link (org-element-context))
         (path (org-element-property :path link)))
    (if (y-or-n-p "Undoable. Are you sure?")
        (progn
          (delete-file path)
          (delete-region (org-element-property :begin link)
                         (org-element-property :end link))))))

(defun ed/org-set-file-property-in-drawer (property value)
  "In the current FILE, set PROPERTY to VALUE, both being string.

When called interactively, this will prompt for a property name, offering
completion on existing and default properties.  And then it will prompt
for a value, offering completion either on allowed values (via an inherited
xxx_ALL property) or on existing values in other instances of this property
in the current file.

Throw an error when trying to set a property with an invalid name.

This function just change the original =org-set-property= and call
=org-entry-xxx= with POM 0"
  (interactive (list nil nil))
  (let ((property (or property (org-read-property-name))))
    ;; `org-entry-put' also makes the following check, but this one
    ;; avoids polluting `org-last-set-property' and
    ;; `org-last-set-property-value' needlessly.
    (unless (org--valid-property-p property)
      (user-error "Invalid property name: \"%s\"" property))
    (let ((value (or value (org-read-property-value property)))
	  (fn (cdr (assoc-string property org-properties-postprocess-alist t))))
      (setq org-last-set-property property)
      (setq org-last-set-property-value (concat property ": " value))
      ;; Possibly postprocess the inserted value:
      (when fn (setq value (funcall fn value)))
      (unless (equal (org-entry-get 0 property) value)
	(org-entry-put 0 property value)))))

(defun ed/org-set-hugo-draft-true ()
  (interactive)
  (org-roam-set-keyword "hugo_draft" "true"))

(defun ed/org-set-hugo-draft-false ()
  (interactive)
  (org-roam-set-keyword "hugo_draft" "false"))

(defun ed/make-org-filename (sec)
  (let ((name (read-string "Name: "))
        (secpath (concat org-directory sec "/")))
    (expand-file-name (concat name ".org") secpath)))

(defun ed/load-light-theme ()
  (interactive)
  (load-theme 'tsdh-light))

(defun ed/load-dark-theme ()
  (interactive)
  (load-theme 'doom-palenight))

;; keymaps
(map! "C-c d" #'ed/delete-file-and-buffer
      "C-c r" #'ed/revert-buffer-no-confirm
      "C-c c" #'ed/copy-file-only-name-to-clipboard
      :leader
      :prefix "z"
      :desc "lights on" "l" #'ed/load-light-theme
      :desc "lights off" "d" #'ed/load-dark-theme
      :desc "LSP off" "p" #'eglot-shutdown
      :desc "LSP on" "s" #'eglot)

;; org
(after! org
  (require 'find-lisp)
  (setq org-preview-latex-image-directory (concat doom-cache-dir "org-latex/")
        org-preview-latex-default-process 'dvisvgm ; use svg for LaTeX preview
        ;; org-startup-with-latex-preview t
        org-image-actual-width 256 ; prevent image generated by org-xournalpp from getting too large on screen
        org-agenda-files (expand-file-name "dump/todo.org" org-directory)
        org-capture-templates
        '(("i" "Chore" entry
           (file "dump/todo.org")
           "* TODO %? :chore:\n")
          ("c" "Comp" entry
           (file "dump/todo.org")
           "* TODO %? :comp:\n")
          ("m" "Music" entry
           (file "dump/todo.org")
           "* TODO %? :music:\n")
          ("g" "Grad" entry
           (file "dump/grad.org")
           "* TODO %?\n")
          ("t" "thought" entry
           (file "dump/thought.org")
           "* TODO %?\n")
          ("l" "Link" entry
           (file "dump/link.org")
           "* TODO %?\n"))))

(use-package! org-roam
  :init
  (require 'org-roam-export)
  (map! :leader
        :prefix "r"
        :desc "org-roam" "b" #'org-roam-buffer-toggle
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-node-find" "f" #'org-roam-node-find
        :desc "mark as draft" "d" #'ed/org-set-hugo-draft-true
        :desc "ready for publish" "p" #'ed/org-set-hugo-draft-false)
  (setq org-roam-directory (expand-file-name "box/" org-directory))
  (setq org-roam-db-location (concat org-roam-directory "org-roam.db"))
  (setq org-id-locations-file (concat org-roam-directory ".orgids"))
  :config
  (setq org-id-track-globally t)
  (org-roam-db-autosync-mode 1)
  (set-popup-rules!
    `((,(regexp-quote org-roam-buffer) ; persistent org-roam buffer
       :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 1)
      ("^\\*org-roam: " ; node dedicated org-roam buffer
       :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 2)))
  (add-hook 'org-roam-mode-hook #'turn-on-visual-line-mode)
  (add-hook 'org-roam-capture-new-node-hook #'ed/org-set-hugo-draft-true)
  ;; (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (setq org-roam-capture-templates
        '(("d" "dots" plain "%?"
           :target (file+head
                    "dots/%<%Y%m%d%H%M%S>.org"
                    "#+title: ${title}\n#+hugo_section: dots\n")
           :immediate-finish t
           :unnarrowed t)
          ("m" "maps" plain "%?"
           :target (file+head
                    "maps/%<%Y%m%d%H%M%S>.org"
                    "#+title: ${title}\n#+hugo_section: maps\n")
           :immediate-finish t
           :unnarrowed t)
          ("a" "articles" plain "%?"
           :target (file+head
                    "articles/%<%Y%m%d%H%M%S>.org"
                    "#+title: ${title}\n#+hugo_section: articles\n")
           :immediate-finish t
           :unnarrowed t))))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow nil
        org-roam-ui-update-on-save nil
        org-roam-ui-open-on-start t))

(use-package! org-xournalpp ; not using the minor mode itself at all: cannot handle multiple pages
  :config
  (setq org-xournalpp-sketch-dir (expand-file-name "sketch/" org-roam-directory)
        org-xournalpp-image-type 'png ; pen tablet precision makes svg too large to handle
        org-xournalpp-get-new-filepath (lambda ()
                                         (read-file-name "New xopp: "
                                                         (concat default-directory "sketch/" (file-name-base buffer-file-name) "/")))
        org-xournalpp-get-new-desc (lambda ())
        org-xournalpp-template-getter (lambda ()
                                        (expand-file-name "template.xopp" org-xournalpp-sketch-dir))
        org-xournalpp-path-default "sketch/temp"
        org-xournalpp-cache-directory-alist (list (cons "." (concat doom-cache-dir "org-xournalpp/")))))

;; irc
(after! circe
  (setq circe-network-options
        '(("Libera Chat"
           :tls t
           :nick "eddd"
           :sasl-username "eddd" ; TODO ,(+pass-get-secret "libera.chat/username") not working, hash?
           :sasl-password (lambda (&rest _) (+pass-get-secret "libera.chat/password"))
           :channels ("#emacs")
           ))))

;; spell
(setq ispell-dictionary "en")

;; latex
(setq +latex-viewers '(zathura))
(setq pdf-latex-command "xelatex") ; CJK support

;; email
(set-email-account! "mailbox.org"
                    '((user-full-name         . "Eric Deng")
                      (smtpmail-smtp-user     . "ed@mailbox.org")
                      (mu4e-sent-folder       . "/Sent")
                      (mu4e-drafts-folder     . "/Drafts")
                      (mu4e-trash-folder      . "/Trash")
                      (mu4e-refile-folder     . "/Archive"))
                    t)

(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))

;; eglot
(use-package! eglot
  :config
  (add-to-list 'eglot-ignored-server-capabilites :hoverProvider))

;; word wrap
(setq +word-wrap-extra-indent nil)
