#!/bin/bash
# Wireguard over Trojan
set -e

tj_config_d=/etc/trojan
wg_config_d=/etc/wireguard
nft_config_d=/etc/nftables.d
nft_config_f=/etc/nftables.conf
dnsmasq_config_d=/etc/dnsmasq.d
dnsmasq_config_f=/etc/dnsmasq.conf
tj_nodes_f=$tj_config_d/nodes
wg_nodes_f=$wg_config_d/nodes
wg_key_f=$wg_config_d/key
tj_node_cache=$tj_config_d/last
wg_node_cache=$wg_config_d/last

depends=($tj_nodes_f $wg_nodes_f $wg_config_d/ip $wg_config_d/key $nft_config_d/cnip
  $dnsmasq_config_d/accelerated-domains.china.conf $dnsmasq_config_d/bogus-nxdomain.china.conf)

ask() {
  while true; do
    if [ "${2:-}" = "Y" ]; then
      prompt="Y/n"
      default=Y
    elif [ "${2:-}" = "N" ]; then
      prompt="y/N"
      default=N
    else
      prompt="y/n"
      default=
    fi
    read -p "$1 [$prompt] " REPLY
    if [ -z "$REPLY" ]; then
      REPLY=$default
    fi
    case "$REPLY" in
      Y* | y*) return 0 ;;
      N* | n*) return 1 ;;
    esac
  done
}

check_depend_files() {
  miss=
  for _d in "${depends[@]}"; do
    if [ ! -f $_d ]; then
      miss="y"
      echo "[-] Missing: $_d"
    fi
  done
  if [ "$miss" == "y" ]; then
    echo "Run wot-fetch first. Exit."
    exit 1
  fi
}

config_cgroup() {
  echo "[+] Configuring cgroup."
  direct_procs=${BACKDOOR:-/sys/fs/cgroup/net_cls/direct/cgroup.procs}
  if [ ! -d /sys/fs/cgroup/net_cls ]; then
    mkdir -p /sys/fs/cgroup/net_cls
    mount -t cgroup -o net_cls none /sys/fs/cgroup/net_cls
  fi
  mkdir -p /sys/fs/cgroup/net_cls/direct
  echo 5087041 >/sys/fs/cgroup/net_cls/direct/net_cls.classid
}

config_dns() {
  echo "[+] Configuring DNS."
  cat <<EOF >/etc/dnsmasq.conf
server=100.64.0.31
conf-dir=/etc/dnsmasq.d
EOF
  cat <<EOF >/etc/resolv.conf
nameserver ::1
nameserver 127.0.0.1
options trust-ad
EOF
  systemctl restart dnsmasq.service
}

choose_node() {
  echo "[?] No nodes cache found."
  mapfile -t nodes < <(cat $1 | awk '{print $1}')
  for i in "${!nodes[@]}"; do
    printf "%s.%s\n" "$i" "${nodes[$i]}"
  done
  read -p "Choose node (NUM): " n
  if [ -z "$n" ]; then
    echo "None chosen. Exit."
    exit 1
  fi
  echo "${nodes[$n]}" >$2
}

start_trojan() {
  echo "[+] Starting trojan."
  if [ ! -f $tj_node_cache ]; then
    choose_node $tj_nodes_f $tj_node_cache
  else
    echo "Last used node: $(cat $tj_node_cache)"
    ask "Choose a new one?" N && choose_node $tj_nodes_f $tj_node_cache
  fi

  wghost=$(cat $wg_nodes_f | grep $(cat $wg_node_cache) | awk '{print $NF}')

  cat $tj_nodes_f | grep $(cat $tj_node_cache) | while read -r a password tjhost port sni; do
    cat <<EOF >/etc/trojan/forward.json
{
  "run_type": "forward",
  "local_addr": "127.0.0.1",
  "local_port": 51820,
  "remote_addr": "$tjhost",
  "remote_port": $port,
  "target_addr": "$wghost",
  "target_port": 51820,
  "password": [
    "$password"
  ],
  "udp_timeout": 60,
  "log_level": 1,
  "ssl": {
    "verify": false,
    "verify_hostname": true,
    "cert": "",
    "cipher": "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-SHA:AES256-SHA:DES-CBC3-SHA",
    "cipher_tls13": "TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
    "sni": "v1.kwaicdn.com",
    "alpn": [
      "h2",
      "http/1.1"
    ],
    "reuse_session": true,
    "session_ticket": false,
    "curves": ""
  },
  "tcp": {
    "no_delay": true,
    "keep_alive": true,
    "reuse_port": false,
    "fast_open": false,
    "fast_open_qlen": 20
  }
}
EOF
  done
  nohup trojan -c /etc/trojan/forward.json >/tmp/trojan_log 2>&1 &
  disown

  pidof trojan >$direct_procs
}

wireguard_up() {
  echo "[+] Setting up wireguard."
  if [ ! -f $wg_node_cache ]; then
    choose_node $wg_nodes_f $wg_node_cache
  else
    echo "Last used node: $(cat $wg_node_cache)"
    ask "Choose a new one?" N && choose_node $wg_nodes_f $wg_node_cache
  fi

  key=$(cat $wg_key_f)

  cat $wg_nodes_f | grep $(cat $wg_node_cache) | while read -r a pubkey b; do
    cat <<EOF >/etc/wireguard/wg0.conf
[Interface]
PrivateKey = $key
[Peer]
PublicKey = $pubkey
Endpoint = 127.0.0.1:51820
AllowedIPs = 0.0.0.0/0, ::/0
EOF
  done

  ip link del dev wg0 >/dev/null 2>&1 || true
  ip link add dev wg0 type wireguard
  ip address add dev wg0 $(cat /etc/wireguard/ip | head -n1)
  wg setconf wg0 /etc/wireguard/wg0.conf
  ip link set up dev wg0

  ip rule add from all lookup main suppress_prefixlength 0
  ip rule add not from all fwmark 0x6d6f6c65 lookup 1836018789

  ip route add 100.64.0.31/32 dev wg0
  ip route add default dev wg0 table 1836018789
}

config_nftables() {
  cat <<EOF >/etc/nftables.conf
include "/etc/nftables.d/cnip"
table inet mullvad {
	chain prerouting {
		type filter hook prerouting priority -199; policy accept;
		iif != "wg0" ct mark 0x00000f41 meta mark set 0x6d6f6c65
		ip saddr \$cnip4 meta mark set 0x6d6f6c65
		ip6 saddr \$cnip6 meta mark set 0x6d6f6c65
	}
	chain input {
		type filter hook input priority filter; policy drop;
		iif "lo" accept
		ct mark 0x00000f41 accept
		udp sport 67 udp dport 68 accept
		ip6 saddr fe80::/10 udp sport 547 udp dport 546 ip6 daddr fe80::/10 accept
		ip6 saddr fe80::/10 icmpv6 type nd-router-advert icmpv6 code no-route accept
		ip6 saddr fe80::/10 icmpv6 type nd-redirect icmpv6 code no-route accept
		ip6 saddr fe80::/10 icmpv6 type nd-neighbor-solicit icmpv6 code no-route accept
		icmpv6 type nd-neighbor-advert icmpv6 code no-route accept
		ip saddr \$cnip4 ct state established accept
		ip6 saddr \$cnip6 ct state established accept
		iif "wg0" accept
		ip daddr 10.107.152.124 drop
		ip saddr 10.0.0.0/8 accept
		ip saddr 172.16.0.0/12 accept
		ip saddr 192.168.0.0/16 accept
		ip saddr 169.254.0.0/16 accept
		ip6 saddr fe80::/10 accept
		ip6 saddr fc00::/7 accept
		udp sport 68 udp dport 67 ip daddr 255.255.255.255 accept
	}
	chain output {
		type filter hook output priority filter; policy drop;
		oif "lo" accept
		ct mark 0x00000f41 accept
		udp sport 68 udp dport 67 ip daddr 255.255.255.255 accept
		ip6 saddr fe80::/10 udp sport 546 udp dport 547 ip6 daddr ff02::1:2 accept
		ip6 saddr fe80::/10 udp sport 546 udp dport 547 ip6 daddr ff05::1:3 accept
		ip6 daddr ff02::2 icmpv6 type nd-router-solicit icmpv6 code no-route accept
		ip6 daddr ff02::1:ff00:0/104 icmpv6 type nd-neighbor-solicit icmpv6 code no-route accept
		ip6 daddr fe80::/10 icmpv6 type nd-neighbor-solicit icmpv6 code no-route accept
		ip6 daddr fe80::/10 icmpv6 type nd-neighbor-advert icmpv6 code no-route accept
		ip daddr \$cnip4 meta mark 0x6d6f6c65 accept
		ip6 daddr \$cnip6 meta mark 0x6d6f6c65 accept
		oif "wg0" udp dport 53 ip daddr 100.64.0.31 accept
		oif "wg0" udp dport 53 ip6 daddr fc00:bbbb:bbbb:bb01::1 accept
		oif "wg0" tcp dport 53 ip daddr 100.64.0.31 accept
		oif "wg0" tcp dport 53 ip6 daddr fc00:bbbb:bbbb:bb01::1 accept
		udp dport 53 ip daddr 114.114.114.114 accept
		tcp dport 53 ip daddr 114.114.114.114 accept
		udp dport 53 reject
		tcp dport 53 reject with tcp reset
		oif "wg0" accept
		ip daddr 10.0.0.0/8 accept
		ip daddr 172.16.0.0/12 accept
		ip daddr 192.168.0.0/16 accept
		ip daddr 169.254.0.0/16 accept
		ip6 daddr fe80::/10 accept
		ip6 daddr fc00::/7 accept
		ip daddr 255.255.255.255 accept
		ip daddr 224.0.0.0/24 accept
		ip daddr 239.255.0.0/16 accept
		ip6 daddr ff01::/16 accept
		ip6 daddr ff02::/16 accept
		ip6 daddr ff03::/16 accept
		ip6 daddr ff04::/16 accept
		ip6 daddr ff05::/16 accept
		udp sport 67 udp dport 68 accept
		reject
	}
}
table ip mullvadmangle4 {
	chain mangle {
		type route hook output priority mangle; policy accept;
		oif "wg0" udp dport 53 ip daddr 100.64.0.31 accept
		oif "wg0" tcp dport 53 ip daddr 100.64.0.31 accept
		udp dport 53 ip daddr 114.114.114.114 ct mark set 0x00000f41 meta mark set 0x6d6f6c65
		tcp dport 53 ip daddr 114.114.114.114 ct mark set 0x00000f41 meta mark set 0x6d6f6c65
		meta cgroup 5087041 ct mark set 0x00000f41 meta mark set 0x6d6f6c65
	}
	chain nat {
		type nat hook postrouting priority srcnat; policy accept;
		oif "wg0" ct mark 0x00000f41 drop
		oif != "lo" ct mark 0x00000f41 masquerade
	}
}
EOF
  nft -f /etc/nftables.conf
}

if [ $EUID -ne 0 ]; then
  echo "Run as root. Exit."
  exit 1
fi

if [ $# -ne 1 ]; then
  echo "usage: wot up|clean"
  exit 1
fi

if [ $1 = up ]; then
  mkdir -p $tj_config_d $wg_config_d $nft_config_d $dnsmasq_conf_d

  check_depend_files
  config_cgroup
  config_dns
  wireguard_up
  config_nftables
  start_trojan
elif [ $1 = clean ]; then
  ip link set dev wg0 down >/dev/null 2>&1 || true
  ip link del dev wg0 >/dev/null 2>&1 || true
  ip rule del from all lookup main suppress_prefixlength 0 >/dev/null 2>&1 || true
  ip rule del not from all fwmark 0x6d6f6c65 lookup 1836018789 >/dev/null 2>&1 || true
  ip route del 100.64.0.31/32 dev wg0 >/dev/null 2>&1 || true
  ip route del default dev wg0 table 1836018789 >/dev/null 2>&1 || true
  nft flush ruleset
  pkill trojan || true
  cat <<EOF >/etc/resolv.conf
nameserver 114.114.114.114
EOF
  systemctl stop dnsmasq.service
else
  echo "usage: wot up|clean"
  exit 1
fi
