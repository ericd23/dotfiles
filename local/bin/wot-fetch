#!/bin/bash
# Fetch needed file for wot
set -e

ask() {
    while true; do
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi
        read -p "$1 [$prompt] " REPLY
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi
        case "$REPLY" in
            Y* | y*) return 0 ;;
            N* | n*) return 1 ;;
        esac
    done
}

die() {
    echo "[-] Error: $1" >&2
    exit 1
}

fetch_cnip() {
    echo "[+] Fetching China IP set."
    WORKDIR=$(mktemp -d)
    TEMP_FILE=$WORKDIR/cnip
    echo "define cnip4 = {" >$TEMP_FILE
    curl -s 'https://gaoyifan.github.io/china-operator-ip/china.txt' | sed 's/$/,/' >>$TEMP_FILE
    echo "}" >>$TEMP_FILE
    echo "define cnip6 = {" >>$TEMP_FILE
    curl -s 'https://gaoyifan.github.io/china-operator-ip/china6.txt' | sed 's/$/,/' >>$TEMP_FILE
    echo "}" >>$TEMP_FILE
    mkdir -p /etc/nftables.d
    rm -f /etc/nftables.d/cnip
    cp $TEMP_FILE /etc/nftables.d/cnip
    rm -r $WORKDIR
}

fetch_cndns() {
    echo "[+] Fetching China DNS set."
    WORKDIR=$(mktemp -d)
    CONFS=(bogus-nxdomain.china accelerated-domains.china)
    git clone --depth=1 https://gitee.com/felixonmars/dnsmasq-china-list.git $WORKDIR
    mkdir -p /etc/dnsmasq.d
    for _conf in "${CONFS[@]}"; do
        rm -f /etc/dnsmasq.d/$_conf.conf
    done
    for _conf in "${CONFS[@]}"; do
        cp $WORKDIR/$_conf.conf /etc/dnsmasq.d/$_conf.conf
    done
    rm -r $WORKDIR
}

fetch_trojan() {
    echo "[+] Fetching Trojan nodes."
    WORKDIR=$(mktemp -d)

    if [ ! -f /etc/trojan/sub ]; then
        echo "Subscribe URL not found."
        read -p "[?] Enter Trojan subscribe URL: " sub
        echo $sub >$WORKDIR/sub
    else
        sub=$(cat /etc/trojan/sub)
        echo "Current subscribe URL: $sub"
        ask "Use a new one?" N && read -p "[?] Enter Trojan subscribe URL: " sub
        echo $sub >$WORKDIR/sub
    fi

    raw=$(curl -s $sub)

    echo $raw | tr ' ' '\n' | base64 -di 2>/dev/null | grep trojan | while read line; do
        desc=$(printf $(echo $line | awk -F '#' '{print $NF}' | sed 's/%/\\x/g') |
            tr -cd '[:alnum:]._-' | tr '[:upper:]' '[:lower:]')
        password=$(echo $line | awk -F '//' '{print $NF}' | awk -F '@' '{print $1}')
        host=$(echo $line | awk -F '@' '{print $NF}' | awk -F ':' '{print $1}')
        port=$(echo $line | awk -F ':' '{print $NF}' | awk -F '?' '{print $1}')
        sni=$(echo $line | awk -F 'sni=' '{print $NF}' | awk -F '[&#]' '{print $1}')
        echo $desc $password $host $port $sni >>$WORKDIR/nodes
    done

    mkdir -p /etc/trojan
    rm -f /etc/trojan/nodes 2>/dev/null || true
    cp $WORKDIR/nodes /etc/trojan/nodes
    rm -f /etc/trojan/sub 2>/dev/null || true
    cp $WORKDIR/sub /etc/trojan/sub
    rm -r $WORKDIR
}

fetch_mullvad() {
    echo "[+] Fetching Mullvad WG."
    WORKDIR="$(mktemp -d)"
    FILES=(mullvad_account key ip nodes)
    CURL_WRAP=curl
    ID=
    KEY=
    PUBKEY=
    ask "Use socks5 proxy on port 1080?" N && CURL_WRAP="curl -x socks5h://localhost:1080"

    if [ ! -f /etc/wireguard/mullvad_account ]; then
        echo "Mullvad account number not found."
        read -p "[?] Enter account number: " ID
        echo $ID >$WORKDIR/mullvad_account
    else
        ID=$(cat /etc/wireguard/mullvad_account)
        echo "Current account number: $ID"
        ask "Use a new one?" N && read -p "[?] Enter account number: " ID
        echo $ID >$WORKDIR/mullvad_account
    fi

    umask 077
    if [ -r "/etc/wireguard/key" ]; then
        KEY="$(cat /etc/wireguard/key)"
    fi
    if [ -n "$KEY" ]; then
        echo "Using existing private key."
    else
        echo "Generating new private key."
        KEY="$(wg genkey)"
        echo $KEY >$WORKDIR/key
    fi
    PUBKEY="$(printf '%s\n' "$KEY" | wg pubkey)"
    echo "Submitting public key to Mullvad."
    res="$($CURL_WRAP -sSL https://api.mullvad.net/wg/ \
        -d account="$ID" \
        --data-urlencode pubkey="$PUBKEY")"
    if ! printf '%s\n' "$res" | grep -E '^[0-9a-f:/.,]+$' >/dev/null; then
        die "[-] Error: $res"
    fi
    echo $res | tr ',' '\n' >$WORKDIR/ip

    $CURL_WRAP -LsS https://api.mullvad.net/public/relays/wireguard/v1/ |
        jq -r \
            '( .countries[]
        | (.cities[]
          | (.relays[]
            | [.hostname, .public_key, .ipv4_addr_in])
        )
      )
      | flatten
      | join(" ")' >$WORKDIR/nodes

    for _f in "${FILES[@]}"; do
        rm -f /etc/wireguard/$_f
    done
    for _f in "${FILES[@]}"; do
        cp $WORKDIR/$_f /etc/wireguard/$_f 2>/dev/null || true
    done
    rm -r $WORKDIR

    ACCOUNT_INFO=$($CURL_WRAP -s https://api.mullvad.net/www/accounts/"$ID"/)
    TOKEN=$(printf '%s\n' "$ACCOUNT_INFO" | jq -r .auth_token)
    EXPIRY=$(printf '%s\n' "$ACCOUNT_INFO" | jq -r .account.expires)
    $CURL_WRAP -s -X POST https://api.mullvad.net/www/expire-auth-token/ \
        -H "Authorization: Token $TOKEN"
    printf 'Account expires on %s\n' "$(date -d "$EXPIRY")" >&2
}

main() {
    case "$1" in
        cnip) fetch_cnip && exit ;;
        cndns) fetch_cndns && exit ;;
        trojan) fetch_trojan && exit ;;
        mullvad) fetch_mullvad && exit ;;
        *) die "option '$1' does not exist" ;;
    esac
}

if [ $EUID -ne 0 ]; then
    die "Run this as root."
fi

if [ $# -ne 1 ]; then
    echo "usage: wot-fetch cnip | cndns | trojan | mullvad"
    exit 0
fi

main "$@"
